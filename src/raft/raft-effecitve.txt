package raft

//
// this is an outline of the API that raft must expose to
// the service (or tester). see comments below for
// each of these functions for more details.
//
// rf = Make(...)
//   create a new Raft server.
// rf.Start(command interface{}) (index, term, isleader)
//   start agreement on a new log entry
// rf.GetState() (term, isLeader)
//   ask a Raft for its current term, and whether it thinks it is leader
// ApplyMsg
//   each time a new entry is committed to the log, each Raft peer
//   should send an ApplyMsg to the service (or tester)
//   in the same server.
//

import (
	"math/rand"
	"sort"
	"sync"
	"time"
)
import "sync/atomic"
import "../labrpc"

//
// as each Raft peer becomes aware that successive log entries are
// committed, the peer should send an ApplyMsg to the service (or
// tester) on the same server, via the applyCh passed to Make(). set
// CommandValid to true to indicate that the ApplyMsg contains a newly
// committed log entry.
//
// in Lab 3 you'll want to send other kinds of messages (e.g.,
// snapshots) on the applyCh; at that point you can add fields to
// ApplyMsg, but set CommandValid to false for these other uses.
//
type ApplyMsg struct {
	CommandValid bool
	Command      interface{}
	CommandIndex int
}

type LogItem struct {
	Command interface{}
	Term int
}

func isMoreUpdated(term1, index1, term2, index2 int) bool{
	if term1 > term2{
		return true
	}
	if term1 == term2 && index1 >= index2{
		return true
	}
	return false



}
type NodeState int
const (
	Follower NodeState = iota
	Candidate
	Leader
)
//
// A Go object implementing a single Raft peer.
//
type Raft struct {
	mu        sync.Mutex          // Lock to protect shared access to this peer's state
	peers     []*labrpc.ClientEnd // RPC end points of all peers
	persister *Persister          // Object to hold this peer's persisted state
	applyCh chan ApplyMsg
	me        int                 // this peer's index into peers[]
	dead      int32               // set by Kill()

	state NodeState

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	// persistent
	currentTerm int
	voteFor int
	log []LogItem

	// volatile
	commitIndex int
	lastApplied int

	// volatile leader
	nextIndex []int
	matchIndex []int


	electionTimeStamp time.Time
	voteCount int

	electionTimeout time.Duration
}


func (rf *Raft) getPreviousIndexForServer(i int) int{
	return rf.nextIndex[i] - 1
}

func (rf *Raft) getPreviousTermForServer(i int) int{
	if rf.nextIndex[i] - 1 == 0{
		return 0
	}
	return rf.log[rf.nextIndex[i] - 2].Term
}

func (rf *Raft) getAppendLogItem(i int) []LogItem{
	nextI := rf.nextIndex[i]
	if nextI == rf.getLastLogIndex() + 1{
		return []LogItem{}
	}
	newLog := []LogItem{}
	for i := nextI - 1; i < len(rf.log); i++{
		newLog = append(newLog, rf.log[i])
	}
	return newLog
}

func (rf *Raft) getLastLogTerm()int{
	if len(rf.log) == 0{
		return -1
	}
	return rf.log[len(rf.log) - 1].Term
}

func (rf *Raft) getLastLogIndex()int{
	return len(rf.log)
}

func (rf *Raft) getMajorityCount()int{
	return len(rf.peers) / 2 + 1
}

func (rf *Raft) findMatch() int{
	match := make([]int, len(rf.matchIndex))
	copy(match, rf.matchIndex)
	sort.Ints(match)
	middle := match[len(match) / 2]
	return middle
}
// return currentTerm and whether this server
// believes it is the leader.
func (rf *Raft) GetState() (int, bool) {

	// Your code here (2A).
	return rf.currentTerm, rf.state == Leader
}

//
// save Raft's persistent state to stable storage,
// where it can later be retrieved after a crash and restart.
// see paper's Figure 2 for a description of what should be persistent.
//
func (rf *Raft) persist() {
	// Your code here (2C).
	// Example:
	// w := new(bytes.Buffer)
	// e := labgob.NewEncoder(w)
	// e.Encode(rf.currentTerm)
	// e.Encode(rf.voteFor)
	// e.Encode(rf.log)
	// data := w.Bytes()
	// rf.persister.SaveRaftState(data)
}


//
// restore previously persisted state.
//
func (rf *Raft) readPersist(data []byte) {
	if data == nil || len(data) < 1 { // bootstrap without any state?
		return
	}
	// Your code here (2C).
	// Example:
	// r := bytes.NewBuffer(data)
	// d := labgob.NewDecoder(r)
	// var xxx
	// var yyy
	// if d.Decode(&xxx) != nil ||
	//    d.Decode(&yyy) != nil {
	//   error...
	// } else {
	//   rf.xxx = xxx
	//   rf.yyy = yyy
	// }
}



type AppendEntriesArgs struct {
	Term int
	LeaderId int
	PrevLogIndex int
	PrevLogTerm int
	Entries []LogItem
	LeaderCommit int
}

type AppendEntriesReply struct {
	Term int
	Success bool
}

//
// example RequestVote RPC arguments structure.
// field names must start with capital letters!
//
type RequestVoteArgs struct {
	Term int
	CandidateId int
	LastLogIndex int
	LastLogTerm int
}

//
// example RequestVote RPC reply structure.
// field names must start with capital letters!
//
type RequestVoteReply struct {
	// Your data here (2A).
	Term int
	VoteGranted bool
}

//
// example RequestVote RPC handler.
func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) {
	// Your code here (2A, 2B).

	rf.mu.Lock()
	if args.Term > rf.currentTerm{
		rf.becomeFollower(args.Term)
	}

	if args.Term == rf.currentTerm {
		if rf.voteFor == -1 || rf.voteFor == args.CandidateId {
			lastTerm := rf.getLastLogTerm()
			lastIndex := rf.getLastLogIndex()
			if isMoreUpdated(args.LastLogTerm, args.LastLogIndex, lastTerm, lastIndex) {
				rf.voteFor = args.CandidateId
				reply.Term = rf.currentTerm
				reply.VoteGranted = true
				rf.mu.Unlock()
				return
			}
		}
	}
	reply.Term = rf.currentTerm
	reply.VoteGranted = false
	rf.mu.Unlock()
}

func (rf *Raft) AppendEntries(args *AppendEntriesArgs, reply *AppendEntriesReply){

	rf.mu.Lock()
	if args.Term < rf.currentTerm{
		reply.Term = rf.currentTerm
		reply.Success = false
		rf.mu.Unlock()
		return
	}


	rf.electionTimeStamp = time.Now()
	// valid term
	if args.Term > rf.currentTerm || rf.state == Candidate || rf.state == Leader {
		rf.becomeFollower(args.Term)
	}
	reply.Term = rf.currentTerm
	previous := args.PrevLogIndex
	// current := previous + 1
	if previous != 0 && (len(rf.log) < previous || rf.log[previous - 1].Term != args.PrevLogTerm){
		reply.Success = false
		rf.mu.Unlock()
		return
	}
	/*
	if len(rf.log) >= current{
		if len(args.Entries) == 0  || args.Entries[0].Term != rf.log[current - 1].Term {
			rf.log = rf.log[: current - 1]
		}
	}
	if len(args.Entries) != 0 && len(rf.log) < current{

		rf.log = append(rf.log, args.Entries[0])
	}*/
	newLog := make([]LogItem, previous)
	copy(newLog, rf.log[: previous])

	for i := 0; i < len(args.Entries); i++{
	newLog = append(newLog, args.Entries[i])
	}
	rf.log = newLog

	reply.Success = true
	if args.LeaderCommit > rf.commitIndex{
		lastCommit := rf.commitIndex
		rf.commitIndex = Min(rf.getLastLogIndex(), args.LeaderCommit)
		rf.sendCommitMessage(lastCommit + 1, rf.commitIndex)
		rf.lastApplied = Max(rf.commitIndex, rf.lastApplied)
	}
	// reset election time stamp
	rf.electionTimeStamp = time.Now()
	DPrintf("%v server log state is: %v+", rf.me, rf.log)

	DPrintf("%v server commit state is: %v", rf.me, rf.commitIndex)

	rf.mu.Unlock()
}

func (rf *Raft) becomeFollower(term int){
	rf.currentTerm = term
	rf.voteCount = 0
	rf.voteFor = -1
	rf.state = Follower
	rf.electionTimeStamp = time.Now()
}
func (rf *Raft) becomeCandidate(){
	rf.state = Candidate
	rf.voteFor = rf.me
	rf.voteCount = 1
	rf.currentTerm += 1
	rf.electionTimeStamp = time.Now()
}
func (rf *Raft) becomeLeader(){
	rf.state = Leader
	rf.voteCount = 0
	rf.matchIndex = []int{}
	rf.nextIndex = []int{}
	for i := 0; i < len(rf.peers); i++{
		rf.nextIndex = append(rf.nextIndex, rf.getLastLogIndex() + 1)
		rf.matchIndex = append(rf.matchIndex, 0)
	}
	rf.electionTimeStamp = time.Now()
}

func (rf *Raft) startElection(){
	for rf.dead != 1{
		time.Sleep(time.Millisecond * time.Duration(100))
		rf.mu.Lock()
		if rf.state == Leader ||
			time.Now().Sub(rf.electionTimeStamp) < rf.electionTimeout{
			rf.mu.Unlock()
			continue
		}

		rf.becomeCandidate()
		for i := 0; i < len(rf.peers); i++ {
			j := i
			if j == rf.me{
				continue
			}
			args := &RequestVoteArgs{
				Term: rf.currentTerm,
				CandidateId: rf.me,
				LastLogIndex: rf.getLastLogIndex(),
				LastLogTerm: rf.getLastLogTerm(),
			}
			reply := &RequestVoteReply{}
			go func() {
				ok := rf.sendRequestVote(j, args, reply)
				if !ok{
					return
				}
				rf.mu.Lock()
				if reply.Term > rf.currentTerm{
					rf.becomeFollower(reply.Term)
					rf.mu.Unlock()
					return
				}

				if reply.Term == rf.currentTerm && reply.VoteGranted{
					rf.voteCount += 1
				}
				if rf.voteCount >= rf.getMajorityCount(){
					rf.becomeLeader()
				}
				rf.mu.Unlock()
			}()
		}
		rf.mu.Unlock()
	}
}
func (rf *Raft) startAppend(){
	for rf.dead != 1{
		time.Sleep(time.Millisecond * 150)
		rf.mu.Lock()
		if rf.state != Leader{
			rf.mu.Unlock()
			continue
		}
		for i, _ := range rf.peers{
			if i == rf.me{
				continue
			}
			args := &AppendEntriesArgs{
				Term:         rf.currentTerm,
				LeaderId:     rf.me,
				PrevLogIndex: rf.getPreviousIndexForServer(i),
				PrevLogTerm:  rf.getPreviousTermForServer(i),
				Entries:      rf.getAppendLogItem(i),
				LeaderCommit: rf.commitIndex,
			}
			reply := &AppendEntriesReply{}
			j := i
			go func(){
				ok := rf.sendAppend(j, args, reply)
				if !ok{
					return
				}
				rf.mu.Lock()
				if reply.Term > rf.currentTerm{
					rf.becomeFollower(reply.Term)
					rf.mu.Unlock()
					return
				}
				if rf.state != Leader{
					rf.mu.Unlock()
					return
				}
				if len(args.Entries) == 0{
					rf.mu.Unlock()
					return
				}

				if reply.Success{
					rf.nextIndex[j] = args.PrevLogIndex + len(args.Entries) + 1
					rf.matchIndex[j] =  args.PrevLogIndex + len(args.Entries)
					newCommit := rf.findMatch()
					if newCommit != 0 && rf.log[newCommit - 1].Term == rf.currentTerm {
						lastCommit := rf.commitIndex
						rf.commitIndex = Max(rf.commitIndex, newCommit)
						rf.sendCommitMessage(lastCommit + 1, rf.commitIndex)
						rf.lastApplied = rf.commitIndex
					}
				}else{
					rf.nextIndex[j] = args.PrevLogIndex
				}
				rf.mu.Unlock()
			}()
		}
		rf.mu.Unlock()
	}

}

//
// example code to send a RequestVote RPC to a server.
// server is the index of the target server in rf.peers[].
// expects RPC arguments in args.
// fills in *reply with RPC reply, so caller should
// pass &reply.
// the types of the args and reply passed to Call() must be
// the same as the types of the arguments declared in the
// handler function (including whether they are pointers).
//
// The labrpc package simulates a lossy network, in which servers
// may be unreachable, and in which requests and replies may be lost.
// Call() sends a request and waits for a reply. If a reply arrives
// within a timeout interval, Call() returns true; otherwise
// Call() returns false. Thus Call() may not return for a while.
// A false return can be caused by a dead server, a live server that
// can't be reached, a lost request, or a lost reply.
//
// Call() is guaranteed to return (perhaps after a delay) *except* if the
// handler function on the server side does not return.  Thus there
// is no need to implement your own timeouts around Call().
//
// look at the comments in ../labrpc/labrpc.go for more details.
//
// if you're having trouble getting RPC to work, check that you've
// capitalized all field names in structs passed over RPC, and
// that the caller passes the address of the reply struct with &, not
// the struct itself.
//
func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool {
	DPrintf("%v send a RequestVote to %v\n Args: %+v \n", rf.me, server, args)

	ok := rf.peers[server].Call("Raft.RequestVote", args, reply)
	DPrintf("%v receive a RequestVote from %v \n Reply: %+v\n", rf.me, server, reply)
	return ok
}

func (rf *Raft) sendAppend(server int, args *AppendEntriesArgs, reply *AppendEntriesReply) bool{
	DPrintf("%v send a AppendEntries to %v \n Args: %+v \n", rf.me, server, args)
	ok := rf.peers[server].Call("Raft.AppendEntries", args, reply)
	DPrintf("%v receive a AppendEntries from %v \n Reply: %+v \n", rf.me, server, reply)
	return ok
}


//
// the service using Raft (e.g. a k/v server) wants to start
// agreement on the next command to be appended to Raft's log. if this
// server isn't the leader, returns false. otherwise start the
// agreement and return immediately. there is no guarantee that this
// command will ever be committed to the Raft log, since the leader
// may fail or lose an election. even if the Raft instance has been killed,
// this function should return gracefully.
//
// the first return value is the index that the command will appear at
// if it's ever committed. the second return value is the current
// term. the third return value is true if this server believes it is
// the leader.
//
func (rf *Raft) Start(command interface{}) (int, int, bool) {

	// Your code here (2B).
	rf.mu.Lock()
	if rf.state != Leader {
		rf.mu.Unlock()
		return  -1, -1, false
	}

	newItem := LogItem{
		Command: command,
		Term:    rf.currentTerm,
	}
	rf.log = append(rf.log, newItem)
	rf.matchIndex[rf.me] = rf.getLastLogIndex()
	resultIndex := rf.getLastLogIndex()
	resultCurrentTerm := rf.currentTerm
	rf.mu.Unlock()

	DPrintf("%v leader return a start result index: %v, current term: %v, is leader: %v", rf.me, resultIndex,  resultCurrentTerm, true)

	return resultIndex, resultCurrentTerm, true
}
func (rf *Raft) sendCommitMessage(from, to int){
	for i := from ; i <= to; i++{
		j := i
		rf.applyCh <- ApplyMsg{true, rf.log[i - 1].Command, j}
	}
}
//
// the tester doesn't halt goroutines created by Raft after each test,
// but it does call the Kill() method. your code can use killed() to
// check whether Kill() has been called. the use of atomic avoids th/e
// need for a lock.
//
// the issue is that long-running goroutines use memory and may chew
// up CPU time, perhaps causing later tests to fail and generating
// confusing debug output. any goroutine with a long-running loop
// should call killed() to check whether it should stop.
//
func (rf *Raft) Kill() {
	atomic.StoreInt32(&rf.dead, 1)
	// Your code here, if desired.
}

func (rf *Raft) killed() bool {
	z := atomic.LoadInt32(&rf.dead)
	return z == 1
}

//
// the service or tester wants to create a Raft server. the ports
// of all the Raft servers (including this one) are in peers[]. this
// server's port is peers[me]. all the servers' peers[] arrays
// have the same order. persister is a place for this server to
// save its persistent state, and also initially holds the most
// recent saved state, if any. applyCh is a channel on which the
// tester or service expects Raft to send ApplyMsg messages.
// Make() must return quickly, so it should start goroutines
// for any long-running work.
//
func Make(peers []*labrpc.ClientEnd, me int,
	persister *Persister, applyCh chan ApplyMsg) *Raft {

	rf := &Raft{}
	rf.mu = sync.Mutex{}
	rf.peers = peers
	rf.persister = persister
	rf.me = me

	rf.applyCh = applyCh

	// Your initialization code here (2A, 2B, 2C).

	// Your data here (2A, 2B, 2C).
	// Look at the paper's Figure 2 for a description of what
	// state a Raft server must maintain.

	rf.commitIndex = 0
	rf.lastApplied = 0
	rf.state = Follower

	rf.nextIndex = []int{}
	rf.matchIndex = []int{}


	rf.electionTimeStamp = time.Now()
	rf.voteCount = 0
	// initialize from state persisted before a crash
	// uncomment the next line for 2c
	//rf.readPersist(persister.ReadRaftState())

	// persistent
	rf.currentTerm = 0
	rf.log = []LogItem{}
	rf.voteFor = -1

	rf.electionTimeout = time.Millisecond * time.Duration(300 + rand.Intn(100))

	go rf.startElection()
	go rf.startAppend()

	return rf
}
